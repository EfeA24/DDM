version: "3.9"

networks:
  app-net:

volumes:
  kafka-data:
  redis-data:
  mongo-data:
  mssql-data:

services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    volumes:
      - kafka-data:/bitnami/kafka
    networks: [app-net]

  schema-registry:
    image: confluentinc/cp-schema-registry:7.7.1
    container_name: schema-registry
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    depends_on:
      - kafka
    networks: [app-net]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    depends_on:
      - kafka
      - schema-registry
    networks: [app-net]

  kafka-setup:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-setup
    depends_on:
      - kafka
    entrypoint: ["/bin/bash","-lc"]
    command: |
      '
      until kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do
        echo "Waiting for Kafka..."; sleep 2;
      done

      set -e

      create() { 
        local name=$1; shift
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists \
          --topic "$name" --partitions ${PARTITIONS:-12} --replication-factor 1 "$@";
      }

      # ingest.raw (short retention 1–3 days)
      create ingest.raw --config retention.ms=259200000

      # ingest.normalized (compact+delete hybrid)
      create ingest.normalized --config cleanup.policy=compact,delete --config min.cleanable.dirty.ratio=0.1

      # query.results (short retention 1–2 days)
      create query.results --partitions ${QUERY_PARTITIONS:-6} --config retention.ms=86400000

      # errors.dlq (keep longer)
      create errors.dlq --config retention.ms=1209600000

      echo "Kafka topics ensured."
      sleep 2
      '
    networks: [app-net]

  redis:
    image: bitnami/redis:7.2
    container_name: redis
    restart: unless-stopped
    ports: ["6379:6379"]
    environment:
      - REDIS_PASSWORD=redispass
      - REDIS_AOF_ENABLED=yes
    command: ["redis-server","--appendonly","yes","--requirepass","redispass"]
    volumes:
      - redis-data:/bitnami/redis/data
    networks: [app-net]

  mongodb:
    image: mongo:7
    container_name: mongodb
    restart: unless-stopped
    ports: ["27017:27017"]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=secret
    volumes:
      - mongo-data:/data/db
    networks: [app-net]

  mongo-express:
    image: mongo-express:1.0.2-20
    container_name: mongo-express
    restart: unless-stopped
    ports: ["8082:8081"]
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=secret
      - ME_CONFIG_MONGODB_URL=mongodb://root:secret@mongodb:27017/?authSource=admin
    depends_on: [mongodb]
    networks: [app-net]

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    restart: unless-stopped
    ports: ["1433:1433"]
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=YourStrong!Passw0rd
    volumes:
      - mssql-data:/var/opt/mssql
    networks: [app-net]

  ingest.api:
    image: ghcr.io/yourorg/ingest:dev
    container_name: ingest-api
    restart: unless-stopped
    environment:
      Kafka__BootstrapServers: kafka:9092
      Kafka__ClientId: ingest-api
      SchemaRegistry__Url: http://schema-registry:8081
      ConnectionStrings__Redis: redis:6379,password=redispass
      Ingest__RedisListKey: ingest:queue
      Ingest__Topic: ingest.raw
      ASPNETCORE_ENVIRONMENT: Development
    depends_on: [kafka, schema-registry, redis, kafka-setup]
    networks: [app-net]

  chunk.api:
    image: ghcr.io/yourorg/chunk:dev
    container_name: chunk-api
    restart: unless-stopped
    environment:
      Kafka__BootstrapServers: kafka:9092
      Kafka__ClientId: chunk-api
      SchemaRegistry__Url: http://schema-registry:8081
      ConnectionStrings__Redis: redis:6379,password=redispass
      Mongo__ConnectionString: mongodb://root:secret@mongodb:27017/?authSource=admin
      Mongo__Database: ddm
      ASPNETCORE_ENVIRONMENT: Development
    depends_on: [kafka, schema-registry, mongodb, kafka-setup]
    networks: [app-net]

  query.api:
    image: ghcr.io/yourorg/query:dev
    container_name: query-api
    restart: unless-stopped
    ports: ["5001:8080"]
    environment:
      Kafka__BootstrapServers: kafka:9092
      Kafka__ClientId: query-api
      SchemaRegistry__Url: http://schema-registry:8081
      ConnectionStrings__Redis: redis:6379,password=redispass
      ConnectionRegistry__Mongo: mongodb://root:secret@mongodb:27017/?authSource=admin
      ASPNETCORE_ENVIRONMENT: Development
    depends_on: [kafka, schema-registry, redis, mongodb, kafka-setup]
    networks: [app-net]

  sink.api:
    image: ghcr.io/yourorg/sink:dev
    container_name: sink-api
    restart: unless-stopped
    environment:
      Kafka__BootstrapServers: kafka:9092
      Kafka__ClientId: sink-api
      SchemaRegistry__Url: http://schema-registry:8081
      In__Topics: ingest.normalized,query.results
      ConnectionStrings__Sql: Server=mssql,1433;Database=SinkDb;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True;
      Outbox__Enabled: "true"
    depends_on: [kafka, schema-registry, mssql, kafka-setup]
    networks: [app-net]
